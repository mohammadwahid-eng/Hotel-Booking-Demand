!pip install pycountry
import pandas as pd
import pycountry as pyc
 
data = pd.read_csv("drive/My Drive/data-mining/Hotel Booking Demand/hotel_bookings.csv")
booking = data.copy()
 
#print(booking.isnull().sum().sort_values(ascending=False)) #how many data are missing?
#print(booking[(booking.adults+booking.babies+booking.children)==0].shape) #how many rooms were book but no guest attend
 
 

# Data Preprocessing
booking.agent.fillna(round(data.agent.mean()), inplace=True) #replace all NaN value of agent by mean
booking.company.fillna(round(data.company.mean()), inplace=True) #replace all NaN value of company by mean
booking.children.fillna(round(data.children.mean()), inplace=True) #replace all NaN value of children by mean
booking.country.fillna(data.country.mode().to_string(), inplace=True) #replace all NaN value of country by mode (that appear most)
booking = booking.drop(booking[(booking.adults+booking.babies+booking.children)==0].index) #drop the tuples which room has no guest after booking
booking[["agent", "children", "company"]] = booking[["agent", "children", "company"]].astype("int64") #convert DataType from float64 -> int64
 
 

# Functions
def calculation(column, limit=None):  
  if limit != None:
    column = column.value_counts()[:limit]
  else:
    column = column.value_counts()

  x = column.index #unique tuple list
  y = (column/column.sum())*100 #unique tuple percentage
  return x.values, y.values


def showGraph(x, y, xLabel, mTitle):
  mGraph = pd.DataFrame({
    "Name" : x,
    "Percentage" : y
  }).plot.bar(
    x = "Name",
    y = "Percentage",
    xlabel = xLabel,
    title = mTitle,
    figsize=(12, 6),
    color='#502959'
  );



# isCanceled, bookingPercentage = calculation(booking.is_canceled);
# showGraph(isCanceled, bookingPercentage, "Booking Cancelled (No = 0, Yes = 1)", "Booking cancellation ratio of hotels.");


booking = booking[booking.is_canceled==0]


# hotelTypes, bookingPercentage = calculation(data.hotel);
# showGraph(hotelTypes, bookingPercentage, "Hotel Types", "Hotel has most demand.");




# bookingYears, bookingPercentage = calculation(data.arrival_date_year);
# showGraph(bookingYears, bookingPercentage, "Booking Years", "Booking comparison by year");




# countries, bookingPercentage = calculation(booking.country, 10);
# countries = [pyc.countries.get(alpha_3=code).name for code in countries]
# showGraph(countries, bookingPercentage, "Countries", "Countries from which most guests come.");




# monthsName = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
# monthsData = booking.arrival_date_month.value_counts().reindex(monthsName);
# bookingMonths = monthsData.index
# bookingPercentage = (monthsData/monthsData.sum())*100
# showGraph(bookingMonths, bookingPercentage, "Months", "Busiest month for hotels.");




# single = booking[(booking.adults==1) & (booking.children==0) & (booking.babies==0)]
# couple = booking[(booking.adults==2) & (booking.children==0) & (booking.babies==0)]
# family = booking[(booking.adults + booking.children + booking.babies) > 2]
# accomodationTypes = ["Single", "Couple", "Family"]
# accomodationCount = [single.shape[0], couple.shape[0], family.shape[0]]
# bookingPercentage = [(total/booking.shape[0])*100 for total in accomodationCount]
# showGraph(accomodationTypes, bookingPercentage, "Accomodation Types", "Most booked accommodation type.");




# nights = booking.stays_in_week_nights + booking.stays_in_weekend_nights
# numberOfNights, stayingPercentage = calculation(nights, 10);
# showGraph(numberOfNights, stayingPercentage, "Number of Nights", "How many nights guests stay in the hotel?");
